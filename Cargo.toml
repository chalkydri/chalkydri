[package]
name = "chalkydri"
description = "A blazingly fast FRC vision system"
license = "GPL-3.0"
version = "0.1.0"
edition = "2024"

[features]
default = ["capriltags", "ntables", "web"]
apriltags = ["dep:chalkydri-apriltags"]
ml = ["dep:tfledge"]
python = ["dep:pyo3"]
ntables = ["dep:minint"]
web = ["dep:actix-web", "dep:utoipa"]

# AprilTags C library
capriltags = ["dep:apriltag", "dep:apriltag-image"]

rerun = ["dep:re_sdk", "dep:re_types", "dep:re_ws_comms"]
rerun_web_viewer = ["rerun", "dep:re_web_viewer_server", "re_sdk/web_viewer", "re_ws_comms/server"]

[dependencies]
env_logger = "0.11.2"
log = "0.4.21"
tfledge = { version = "*", path = "crates/chalkydri-tfledge", optional = true }
pyo3 = { version = "0.23.3", optional = true, features = [
  "generate-import-lib",
] }
tokio = { version = "1", features = ["rt-multi-thread", "macros", "fs", "signal"] }
chalkydri-apriltags = { version = "*", optional = true, path = "crates/chalkydri-apriltags" }
serde = { version = "1", features = ["derive"] }
toml = "0.8.12"
actix-web = { version = "4.5.1", optional = true }
minint = { version = "0.1.0", optional = true, path = "crates/minint" }
utoipa = { version = "5.2.0", optional = true, features = ["actix_extras"] }
serde_json = "1"
fastrand = "2.1.0"
apriltag = { version = "0.4.0", optional = true }
apriltag-image = { version = "0.1.0", optional = true }
re_web_viewer_server = { version = "0.22.0", optional = true }
re_ws_comms = { version = "0.22.0", optional = true }
rapier3d = { version = "0.23.0", features = ["parallel", "simd-nightly"] }
mimalloc = { version = "0.1.43", features = ["override"] }
camera-intrinsic-calibration = { git = "https://github.com/chalkydri/camera-intrinsic-calibration-rs.git", branch = "main" }
camera-intrinsic-model = { git = "https://github.com/chalkydri/camera-intrinsic-model-rs.git", branch = "main" }
aprilgrid = "0.5.3"
sqpnp_simple = "0.1.5"
re_sdk = { version = "0.22.0", optional = true }
re_types = { version = "0.22.0", features = ["image"], optional = true }
once_cell = "1.20.2"
chrono = "0.4.39"
gstreamer = { version = "0.23.4", features = ["v1_22"] }
#gstreamer-video = { version = "0.23.4", features = ["v1_22"] }
#gstreamer-base = { version = "0.23.4", features = ["v1_22"] }
gstreamer-app = { version = "0.23.4", features = ["v1_22"] }
rust-embed = { version = "8.5.0", features = ["actix"] }
mime_guess = "2.0.5"
image = "0.25.5"
futures-core = "0.3.31"
futures-util = "0.3.31"
rustix = { version = "0.38.44", features = ["all-apis"] }
futures-executor = "0.3.31"

[build-dependencies]
bindgen = { version = "*", default-features = false, features = ["runtime"] }

[workspace]
members = [
  "crates/chalkydri-apriltags",
  "crates/chalkydri-tfledge",
  "crates/minint",
]

# Compile dependencies with optimization level 3 even when in debug mode
# This can reduce the time required to build when actively developing and testing.
[profile.dev.package.'*']
opt-level = 3

# Compile everything with extreme optimizations when in release mode
[profile.release]
# Optimization level 3 is the most extreme level of optimization.
# It isn't *always* the most optimized for every codebase, but I haven't bothered testing.
# TODO: do that testing
opt-level = 3
# Link Time Optimization
lto = true
# Strip extra symbols (used for debugging and such)
strip = true
# Code generation-- only 1 worker generates more optimized code in theory
codegen-units = 1
